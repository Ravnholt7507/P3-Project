@page "/Product/{ItemSpecification}"
@using Project.CSharpFiles
@inject ProtectedLocalStorage BrowserStorage
@inherits SpecificItemCode


<h2>Product details</h2>

<div class="page">
    <div class="card-body">
        <div class="img-container">
            <img class="img" src="@Prod.ImageLink" />
        </div>

        <div class="card-info">
            <h5 class="card-title">@Prod.Name</h5>
            <h6 class="card-subtitle mb-2 text-muted">@Prod.Name</h6>
            <hr />


            <div class="colour">
                <p>Vælg en farve:</p>
                <select @bind="SelectedColour" @onclick="ResetSize">
                    @foreach (var item in Prod.MyColours)
                    {
                        <option value="@item.ColourName">@item.ColourName</option>
                    }
                </select>
            </div>


            <div class="size">
                <p class="pick-size">Vælg en størrelse:</p>
                @if (Prod != null && Prod.ColourFinder(SelectedColour).Sizes.Count > 0)
                {
                    <select @bind="SelectedSize">
                        @foreach (var item in Prod.ColourFinder(SelectedColour).Sizes)
                        {
                            <option value="@item">@item</option>
                        }
                    </select>
                }
            </div>


            <div class="non-interactive">
                <p>
                    Pris:  <label style="color:darkred">@Prod.Price.ToString("Kr.")</label>
                </p>
                <p class="card-text">@Prod.Description</p>
            </div>


            <div class="btns">
                <NavLink href="/products"> Back To Products</NavLink>
                <button class="btnnn" @onclick="() => { AddItem(); Save();}">Tilføj til kurv</button>
            </div>
        </div>
    </div>
    
</div>



<style>

    .page {
        height: fit-content;
        margin-bottom: 30px;
        outline: 2px solid gray;
        padding: 3px;

    }
    .card-body {
        height: fit-content;
        margin-bottom: -400px;
    }

    .card-info {
        position: relative;
        margin-top: 50px;
        left: 450px;
        bottom: 550px;
    }

    .card-title{
        font-family: fantasy;
        text-decoration: underline;
        font-size: x-large;
    }

    .size {
        margin: 50px 0px 0px 0px;
        font-family: cursive;
    }

    .stock {
        margin: 70px 0px 0px 0px;
    }

    .colour {
        font-family: cursive;
    }

    .img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .img-container {
        width: 400px;
        height: 500px;
    }

    .non-interactive{
        margin-top: 70px;
    }

    .btns{
        margin-top: 50px;
    }

    .btnnn{
        display:inline-block;
        padding:0.35em 1.2em;
        border:0.1em solid #FFFFFF;
        margin:0 0.3em 0.3em 0;
        border-radius:0.12em;
        box-sizing: border-box;
        text-decoration:none;
        font-family:'Roboto',sans-serif;
        font-weight:300;
        color:#FFFFFF;
        text-align:center;
        transition: all 0.2s;
    }
        
    .btnnn{
            color:#000000;
            background-color:#FFFFFF;
    }

    


</style>


@code {
    public string SelectedColour;
    public string SelectedSize;

    public string CartItem;

    // Add an item to a string in local storage that works as a cart
    public void AddItem()
    {
        CartItem += "& " + Prod.Id + " " + Prod.Colour_id + " " + Prod.Size;
    }

    // Load the cart from local storage
    public async Task Read()
    {
        var result = await BrowserStorage.GetAsync<string>("CartItems");
        CartItem = result.Success ? result.Value : "";
    }

    // Save the string into local storage
    public async Task Save()
    {
        await BrowserStorage.SetAsync("CartItems", CartItem);
    }

    // Load specific methods on page load
    protected override Task OnInitializedAsync()
    {
        Read();
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        SelectedColour = Prod.MyColours[0].ColourName;
        SelectedSize = Prod.MyColours[0].Sizes[0];
        return base.OnParametersSetAsync();
    }

    public void ResetSize()
    {
        SelectedSize = Prod.ColourFinder(SelectedColour).Sizes[0];
    }

    public string FindStock(string SelectedColour, string SelectedSize)
    {
        int TempVar = Prod.ColourFinder(SelectedColour).Sizes.FindIndex(x => x == SelectedSize);
        if(TempVar < 0)
        {
            ResetSize();
            return Prod.ColourFinder(SelectedColour).stock[0];
        }
        return Prod.ColourFinder(SelectedColour).stock[TempVar];
    }
}


