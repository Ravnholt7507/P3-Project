@page "/Products"

@inject Product Searchproduct

<h3>Search Products</h3>

<br />

<SearchBarComponent OnSearch="HandleSearch"> </SearchBarComponent>

<br />

<table class="table">
    <thread>
        <tr>
            <th>
                Name
            </th>
            <th>
                Brand
            </th>
            <th>
                Price
            </th>
        </tr>
    </thread>
    <tbody>
        @if (products != null && products.Count() > 0)
        {
            @foreach (var Product in products)
            {
                @if (Product != null)
                {
                    <tr>
                        <td>
                            <NavLink href="@($"product/{Product.ID}")">
                                @Product.Name
                            </NavLink>
                        </td>
                        <td>@Product.Brand</td>
                        <td>@Product.Price.ToString("kr.")</td>
                    </tr>
                }
            }
        }
        else
        {
            <tr>
                <td colspan="3">
                    cannot find products
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public Product product { get; set; }

    public IEnumerable<Product> products = new List<Product>
{
        new Product { ID = 1, Brand = "Beyblade", Name = "Mayeb sauce", Price = 30, Description = "Kúmba", },
        new Product { ID = 2, Brand = "Pokemon", Name = "Ketchup", Price = 40, Description = "Kúmbafsfds", },
        new Product { ID = 3, Brand = "Wow", Name = "Burger", Price = 230, Description = "sdafadf", },
        new Product { ID = 4, Brand = "Yoghurt", Name = "Mayonnaise", Price = 333, Description = "Kdsfsdfa", },
        new Product { ID = 5, Brand = "Bibliotek", Name = "water", Price = 30, Description = "K'efafa", },
        new Product { ID = 6, Brand = "Ressource", Name = "cola", Price = 30, Description = "Kdfdfdsdsdc", },
        new Product { ID = 7, Brand = "KSIOlajidebt", Name = "Faxe kondi", Price = 30, Description = "a", }
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        products = GetProducts();
    }

    public void HandleSearch(string filter)
    {
        products = GetProducts(filter);
    }

    public IEnumerable<Product> GetProducts(string filter = null)
    {
        if (string.IsNullOrWhiteSpace(filter)) return products;
        return products.Where(x => x.Name.ToLower().Contains(filter.ToLower()));
    }
}