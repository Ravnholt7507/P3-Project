@page "/Admin2"
@using CSharpFiles;
@using System.IO;
@using System.Linq;
@inherits AdminCode
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager NavManager

@if (isLoaded)
{
    <div class="page">
        <h2>Tilføj items</h2>
        <div class="name-price-description">
            <form>
                <input class="tastfelt" @bind="NewItem" placeholder="Indtast artikelnavn" required />
                <input class="tastfelt" @bind="Price" placeholder="Indtast pris" required />
                <textarea class="description" @bind="Description" placeholder="Description" required />
            </form>
            <div class="kategori">
                <label>Kategorier</label>
                <select @bind="SelectedCat" class="form-select">
                    @foreach (Category cat in cats)
                    {
                        <optgroup label="@cat.CategoryName"> @cat.CategoryName </optgroup>
                        foreach (Subcategory subcat in cat.Subcategory)
                        {
                            <option value="@subcat.SubcategoryName"> @subcat.SubcategoryName </option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="farvevalgMenu">
            <h2> Vælg farve, størrelse og antal</h2>
            <div class="ColorSize">
                <div class="Color">
                    @foreach (string Colour in Colours)
                    {
                        <div class="column">
                            <input type="radio" name="ChosenColor" @onchange="() => CheckboxColours(Colour)" />
                            <label>
                                @Colour
                            </label>
                        </div>
                    }
                </div>
                <div class="Size">
                    @foreach (string Size in Sizes)
                    {
                        <div class="form-check column">
                            <input type="checkbox" @onchange="e => { CheckboxSizes(Size, e.Value); }" />
                            <label class="form-check-label" for="flexCheckDefault">
                                @Size
                            </label>
                        </div>
                    }
                </div>
            </div>
            <button @onclick="Verify" class="btn btn-outline-dark btn-light OOS">
                <i class="fa fa-fw fa-check"></i>
                Tilføj kombi
            </button>

            @if (MyColors.Count != 0)
            {
                <table>
                    <tr>
                        <th>Item </th>
                        <th>Input stock</th>
                    </tr>
                    @foreach (color Color in MyColors)
                    {
                        @for (int i = 0; i < Color.SnS.Length; i++)
                        {
                            int k = i;
                            <tr>
                                <td>@Color.ColorName</td>
                                <td>@Color.SnS[k].Size</td>
                                <td>
                                    <input type="text" @bind="Color.SnS[k].stock" placeholder="stock" />
                                </td>
                                <td>
                                    <button @onclick="() => RemoveItem(k, Color)" class="btn btn-outline-dark btn-light btn-sm">x</button>
                                </td>
                                <td>@k</td>
                            </tr>
                        }
                    }
                </table>
                <button @onclick="ConfirmStock" class="btn btn-outline-dark btn-light"> <i class="fa fa-fw fa-check"></i> Confirm</button>
            }

            @if (MyColors.Count != 0 && imgState == true)
            {
                <h2> Indsæt billede</h2>
                <div class="row">
                    <div>
                        <label>
                            <input list="Images" @bind="ChosenImg" placeholder="Vælg et billede til produktet" />
                        </label>

                        <button @onclick="() => ReadFile(ChosenImg, SwitchFuntion(ChosenColor))" class="btn btn-outline-dark btn-light">
                            Indsæt
                        </button>

                        <datalist id="Images">
                            @foreach (string ChosenImg in filesList)
                            {
                                <option value=@ChosenImg> </option>
                            }
                        </datalist>
                    </div>

                    <div>
                        <select @bind="ChosenColor">
                            <option> </option>
                            @foreach (color Color in MyColors)
                            {
                                <option value="@Color.ColorName"> @Color.ColorName</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-3">
                        <hr />
                        <h2>File List</h2>
                        <hr />
                        @if (SwitchFuntion(ChosenColor) != null && SwitchFuntion(ChosenColor).ImageLink != null)
                        {
                            @foreach (string imageLink in SwitchFuntion(ChosenColor).ImageLink)
                            {
                                <img src="@imageLink" asp-append-version="true" style="width:150px;height:150px;" />
                            }
                        }
                    </div>
                </div>
                <button class="btn btn-outline-dark btn-light" @onclick="finalize"> <i class="fa fa-fw fa-check"></i> Finalize </button>
            }
        </div>
    </div>

}
else
{
    <p>Sorry, but Rune made spaghtti code.</p>
}

@code
{
    public string FakeAccessToken = "1000";
    public string AccessToken = null;

    bool isLoaded;

    public async Task Read()
    {
        var AccessTokenSession = await SessionStorage.GetAsync<string>("UserName");
        AccessToken = AccessTokenSession.Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Read();
        if (AccessToken != null)
        {
            isLoaded = true;
        }
        StateHasChanged();
    }

    public string ChosenImg = "";
    string img = "";
    string imgName = "N/A";
    public List<string> filesList = new List<string>();
    string path = $"{Directory.GetCurrentDirectory()}{@"/wwwroot/Images"}";

    public void LoadImages()
    {
        var files = Directory.GetFiles(path);
        foreach (var file in files)
        {
            filesList.Add(Path.GetFileName(file));
        }
    }

    public void ReadFile(string fileName, color color)
    {
        if (color != null)
        {
            imgName = fileName.Split('.')[0];
            img = "/Images/" + fileName;
            color.ImageLink.Add(img);
        }
    }

    protected override Task OnInitializedAsync()
    {
        LoadImages();
        return base.OnInitializedAsync();
    }

}


<style>
    .page {
        height: 500px;
    }

    .description {
        margin-top: 50px;
        margin-left: -400px;
    }

    .tastfelt {
        float: left;
    }

    .submit-butt {
        margin-left: 50px;
        margin-top: -50px;
    }

    .kategori {
        padding: 5px;
    }

    .farvevalgMenu {
        border: 1px solid black;
        border-radius: 3px;
        height: fit-content;
        width: fit-content;
        background-color: lightgray;
        padding: 5px;
        float: left;
        margin-left: 1%
    }

    .name-price-description {
        border: 1px solid black;
        border-radius: 3px;
        height: 45%;
        background-color: lightgray;
        padding: 5px;
        float: left;
        width: 550px;
    }

        .name-price-description span {
            display: block;
        }

    .item-list {
        height: fit-content;
        width: fit-content;
        border: 1px solid black;
        border-radius: 3px;
    }

    td, th {
        border: 1px solid black;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }

    .CheckForInput {
        color: red;
    }

    Norm {
        display: inline-block;
    }

        Norm label {
            display: block;
        }

    .ColorSize {
        display: flex;
    }

    .column {
        flex: 50%;
    }

    .Color, .Size {
        border: 1px solid black;
        border-radius: 3px;
        height: fit-content;
        background-color: #efefef;
        padding: 5px;
    }

    .Size {
        margin-left: 20px;
    }
</style>
