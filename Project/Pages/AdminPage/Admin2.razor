@page "/Admin2"
@using CSharpFiles;
@using System.IO;
@using System.Linq;
@inherits AdminCode
<h2>Tilføj items</h2>

<div>
    <label>
        <input @bind="NewItem" placeholder="Indtast artikelnavn" />
    </label>
</div>

<div>
    <label>
        <input @bind="Price" placeholder="Indtast pris" />
    </label>
</div>

<div>
    <textarea @bind="Description"> description </textarea>
    <label>
        Kategorier
        <br />
        <select @bind="SelectedCat" class="form-select">
            @foreach (Category cat in cats)
            {
                <optgroup label="@cat.CategoryName"> @cat.CategoryName </optgroup>
                foreach (Subcategory subcat in cat.Subcategory)
                {
                    <option value="@subcat.SubcategoryName"> @subcat.SubcategoryName </option>
                }
            }
        </select>
    </label>
</div>

<br />
<br />
<br />

<h2> Vælg farve, størrelse og antal </h2>

@foreach (string Colour in Colours)
{
    <div class="form-check">
        <input type="checkbox" disabled="@(placeholderColour != null)" @onchange="e => { CheckboxColours(Colour, e.Value); }" />
        <label class="form-check-label" for="flexCheckDefault">
            @Colour
        </label>
    </div>
}

<style>
    Norm {
        display: inline-block;
    }

        Norm label {
            display: block;
        }
</style>

<br />
@if (placeholderColour != null)
{
    @foreach (string Size in Sizes)
    {
        <div class="form-check">
            <input type="checkbox" @onchange="e => { CheckboxSizes(Size, e.Value); }" />
            <label class="form-check-label" for="flexCheckDefault">
                @Size
            </label>
        </div>
    }
    <button @onclick="@Verify">
        Tilføj kombi
    </button>
}

@if (MyColors.Count != 0)
{
    <table>
        <tr>
            <th>Item </th>
            <th>Input stock</th>
        </tr>
        @foreach (color Color in MyColors)
        {
            @for (int i = 0; i < Color.SnS.Length; i++)
            {
                int k = i;
                <tr>
                    <td>@Color.ColorName</td>
                    <td>@Color.SnS[k].Size</td>
                    <td>
                        <input type="text" @bind="Color.SnS[k].stock" placeholder="stock" />
                    </td>
                    <td>
                        <button @onclick="() => RemoveItem(k, Color)" class="btn btn-outline-dark btn-light btn-sm">x</button>
                    </td>
                    <td>@k</td>
                </tr>
            }
        }
    </table>
    <button @onclick="ConfirmStock" class="btn btn-outline-dark btn-light"> <i class="fa fa-fw fa-check"></i> Confirm</button>
}

<br />
<br />

@if (MyColors.Count != 0 && imgState == true)
{
    <h2> Indsæt billede</h2>
    <div class="row">
        <div>
            <label>
                <input list="Images" @bind="ChosenImg" placeholder="Vælg et billede til produktet" />
            </label>

            <button @onclick="() => ReadFile(ChosenImg, SwitchFuntion(ChosenColor))" class="btn btn-outline-dark btn-light">
                Indsæt
            </button>

            <datalist id="Images">
                @foreach (string ChosenImg in filesList)
                {
                    <option value=@ChosenImg> </option>
                }
            </datalist>
        </div>

        <div>
            <select @bind="ChosenColor">
                <option> </option>
                @foreach (color Color in MyColors)
                {
                    <option value="@Color.ColorName"> @Color.ColorName</option>
                }
            </select>
        </div>

        <div class="col-md-3">
            <hr />
            <h2>File List</h2>
            <hr />
            @if (SwitchFuntion(ChosenColor) != null && SwitchFuntion(ChosenColor).ImageLink != null)
            {
                @foreach (string imageLink in SwitchFuntion(ChosenColor).ImageLink)
                {
                    <img src="@imageLink" asp-append-version="true" style="width:150px;height:150px;" />
                }
            }
        </div>
    </div>

    <br />
    <br />

    @*<button class="btn btn-outline-dark btn-light"> <i class="fa fa-fw fa-check"></i> Finalize </button>*@
    <a href="javascript:void(0)" class="w3-bar-item w3-button w3-padding" onclick="document.getElementById('SelectedImages').style.display='block'">Finalize</a>
}

<div>
    <div id="SelectedImages" class="w3-modal">
        <div class="w3-modal-content w3-animate-zoom" style="padding:32px">
            <div class="w3-container w3-white w3-center">
                <div class="item-list">
                    <table>
                        <tr>
                            <th>Produkt Navn</th>
                            <th>Pris</th>
                            <th>Farve</th>
                            <th>Lager</th>
                            <th>Størrelse</th>
                        </tr>
                        @foreach (var color in MyColors)
                        {
                            @foreach (var SnS in color.SnS)
                            {
                                <tr>
                                    <td>@NewItem</td>
                                    <td> @Price</td>
                                    <td>@color.ColorName</td>
                                    <td> @SnS.stock </td>
                                    <td> @SnS.Size </td>
                                </tr>
                            }
                        }
                    </table>
                    <i onclick="document.getElementById('SelectedImages').style.display='none'" class="fa fa-remove w3-right w3-button w3-transparent w3-xxlarge"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .page {
        height: 500px;
    }

    .item-list {
        height: fit-content;
        width: fit-content;
        border: 1px solid black;
        border-radius: 3px;
    }

    td, th {
        border: 1px solid black;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }
</style>

@code {
    public List<string> SelectedColours = new List<string>();
    public List<SizeAndStock> SelectedSizes = new List<SizeAndStock>();
    public List<string> PlaceholderSizes = new List<string>();


    public int PHColor = 0;
    public int placeholder = 0;

    public bool[] chosenColors = { false, false, false, false };
    public bool[] chosenSizes = { false, false, false };


    string ChosenImg = "";
    string img = "";
    string imgName = "N/A";
    List<string> filesList = new List<string>();
    string path = $"{Directory.GetCurrentDirectory()}{@"\wwwroot\Images"}";

    public void LoadImages()
    {
        var files = Directory.GetFiles(path);
        foreach (var file in files)
        {
            filesList.Add(Path.GetFileName(file));
        }
    }

    public void ReadFile(string fileName, color color)
    {
        if (color != null)
        {
            imgName = fileName.Split('.')[0];
            img = "/Images/" + fileName;
            color.ImageLink.Add(img);
        }
    }

    public string SelectedValue;
    public string Description;
    public string Price;
    public bool imgState = false;

    protected bool IsDisabled { get; set; } = false;

    public string placeholderColour;
    public string SelectedColour = "";

    public string[] Colours = { "red", "blue", "yellow", "green" };
    public string[] Sizes = { "big", "medium", "small" };

    public string SelectedCat = null;
    public string NewItem = null;

    public List<color> MyColors = new List<color>();
    color NewColor;
    public string ChosenColor;

    public List<Category> cats = new List<Category>() { new Category("Mens Clothing"), new Category("Womens clothing") };

    public void Verify()
    {
        NewColor = new color(SelectedColour);
        NewColor.SnS = SelectedSizes.ToArray();
        MyColors.Add(NewColor);
        SelectedSizes.Clear();
        placeholderColour = null;
        NewColor = null;
    }

    protected override Task OnInitializedAsync()
    {
        cats[0].Subcategory.Add(new Subcategory("Trøje"));
        cats[0].Subcategory.Add(new Subcategory("Bukser"));
        cats[1].Subcategory.Add(new Subcategory("Jakke"));
        cats[1].Subcategory.Add(new Subcategory("Sko"));
        LoadImages();
        return base.OnInitializedAsync();
    }

    public color SwitchFuntion(string colour)
    {
        switch (colour)
        {
            case "red": return MyColors.Find(x => x.ColorName == "red");
            case "blue": return MyColors.Find(x => x.ColorName == "blue");
            case "yellow": return MyColors.Find(x => x.ColorName == "yellow");
            case "green": return MyColors.Find(x => x.ColorName == "green");
            default: return null;
        }
    }

    public void ConfirmStock()
    {
        if (NewItem == null || Description == null || Price == null || SelectedCat == null)


        imgState = !imgState;
    }

    public void CheckboxSizes(string size, object checkvalue)
    {
        Console.WriteLine(checkvalue);
        if ((bool)checkvalue)
            SelectedSizes.Add(new SizeAndStock(size));
        if (!(bool)checkvalue)
            SelectedSizes.Remove(new SizeAndStock(size));
    }

    public void CheckboxColours(string colour, object checkvalue)
    {
        if ((bool)checkvalue)
        {
            placeholderColour = colour;
            SelectedColour = colour;
        }
        switch (colour)
        {
            case "red": chosenColors[0] = !chosenColors[0]; break;
            case "blue": chosenColors[1] = !chosenColors[1]; break;
            case "yellow": chosenColors[2] = !chosenColors[2]; break;
            case "green": chosenColors[3] = !chosenColors[3]; break;
            default: break;
        }
    }

    public void RemoveItem(int i, color Color)
    {
        Console.WriteLine(i);
        Color.SnS = Color.SnS.Where((source, index) => index != i).ToArray();
        if (Color.SnS.Length == 0)
        {
            MyColors.Remove(Color);
        }
    }

    public class SizeAndStock
    {
        public SizeAndStock(string InputSize)
        {
            Size = InputSize;
        }
        public int id;
        public string Size;
        public bool state = false;
        public int stock;
    }

    public class color
    {
        public color(string name)
        {
            ColorName = name;
        }
        public List<string> ImageLink = new List<string>();
        public string ColorName;
        public string Id;
        public SizeAndStock[] SnS;
    }

    public class product
    {
        public color[] Color;
        public int Id = 0;
    }

    /*public void AddNewItem()
    {
        Product prod = new Product(1);
        prod.Description = Description;
        prod.Type = SelectedCat;
        prod.Price = Price;
        prod.Name = NewItem;
        prod.ImageLink = img;
        prod.Color.Size =
        SelectedSizes.Clear();
        Console.WriteLine($"{prod.Name} {prod.Description} {prod.Type} {prod.Colour} {prod.Stock} {prod.Price} {prod.Size}");
    }*/
}

@*prod.Colour = SelectedColour;
    prod.Stock = Stock;
    prod.Size = SelectedSizes[0];*@